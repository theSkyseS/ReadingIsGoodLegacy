using System;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;


namespace ReadingIsGoodLegacy
{
    public class Program
    {
        private static Lazy<Settings> _settings = null!;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .AddRunnabilityCheck(state =>
                {
                    switch (state.Settings.GameRelease)
                    {
                        case GameRelease.SkyrimLE:
                            state.LoadOrder.AssertHasMod(ModKey.FromNameAndExtension("Reading Is Good 2.esp"), true, "\n\nReading Is Good 2.esp is not enabled\n\n");
                            break;
                        case GameRelease.SkyrimSE or GameRelease.SkyrimVR:
                            state.LoadOrder.AssertHasMod(ModKey.FromNameAndExtension("ReadingIsGood.esp"), true, "\n\nReadingIsGood.esp is not enabled\n\n");
                            break;
                    }
                })
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "ReadingIsGood-Patch.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var plugin = new ReadingIsGood(state.GameRelease);
            
            foreach (var context in state.LoadOrder.PriorityOrder.Book().WinningContextOverrides().Where(context => context.Record.Teaches is IBookSkillGetter && !_settings.Value.PluginsToIgnore.Contains(context.ModKey)))
            {
                var bookGetter = context.Record;
                var teaches = (BookSkill) bookGetter.Teaches!;
                var skillId = (int) teaches.Skill! - 6;
                if (skillId is >= 0 and <= 17)
                {
                    if (state.PatchMod.FormLists.TryGetOrAddAsOverride(plugin.FormLists[skillId], state.LinkCache,
                        out var formList))
                    {
                        formList.Items.Add(bookGetter);
                        Book book = state.PatchMod.Books.GetOrAddAsOverride(bookGetter);
                        book.Teaches = new BookSkill();
                    }
                }
            }
        }
    }
}
